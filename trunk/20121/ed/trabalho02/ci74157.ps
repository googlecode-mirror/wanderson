%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.0-20091004-56-g11921dc
%%CreationDate: Sun Jun 17 15:46:13 2012
%%Title: /home/wanderson/Faculdade/79010 Eletr√¥nica Digital 1/schematics/mux.sch
%%Author: (null)
%%BoundingBox: 0 0 595 841
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7550 531 translate 90 rotate
0.672071 0.672071 scale
-38590 -40634 translate
gsave
45000 50000 45300 50000 10 line
gsave
false true false false 208.000000 [(2) ] 0 45200 50050 144.444443 text
grestore
gsave
false false false false 208.000000 [(1A) ] 0 45350 50000 144.444443 text
grestore
47000 50000 46700 50000 10 line
gsave
false false false false 208.000000 [(4) ] 0 46800 50050 144.444443 text
grestore
gsave
false true false false 208.000000 [(1Y) ] 0 46650 50000 144.444443 text
grestore
45000 49600 45300 49600 10 line
gsave
false true false false 208.000000 [(3) ] 0 45200 49650 144.444443 text
grestore
gsave
false false false false 208.000000 [(1B) ] 0 45350 49600 144.444443 text
grestore
45000 49200 45300 49200 10 line
gsave
false true false false 208.000000 [(5) ] 0 45200 49250 144.444443 text
grestore
gsave
false false false false 208.000000 [(2A) ] 0 45350 49200 144.444443 text
grestore
47000 49200 46700 49200 10 line
gsave
false false false false 208.000000 [(7) ] 0 46800 49250 144.444443 text
grestore
gsave
false true false false 208.000000 [(2Y) ] 0 46650 49200 144.444443 text
grestore
45000 48800 45300 48800 10 line
gsave
false true false false 208.000000 [(6) ] 0 45200 48850 144.444443 text
grestore
gsave
false false false false 208.000000 [(2B) ] 0 45350 48800 144.444443 text
grestore
45000 48400 45300 48400 10 line
gsave
false true false false 208.000000 [(14) ] 0 45200 48450 144.444443 text
grestore
gsave
false false false false 208.000000 [(3A) ] 0 45350 48400 144.444443 text
grestore
47000 48400 46700 48400 10 line
gsave
false false false false 208.000000 [(12) ] 0 46800 48450 144.444443 text
grestore
gsave
false true false false 208.000000 [(3Y) ] 0 46650 48400 144.444443 text
grestore
45000 48000 45300 48000 10 line
gsave
false true false false 208.000000 [(13) ] 0 45200 48050 144.444443 text
grestore
gsave
false false false false 208.000000 [(3B) ] 0 45350 48000 144.444443 text
grestore
45000 47600 45300 47600 10 line
gsave
false true false false 208.000000 [(11) ] 0 45200 47650 144.444443 text
grestore
gsave
false false false false 208.000000 [(4A) ] 0 45350 47600 144.444443 text
grestore
47000 47600 46700 47600 10 line
gsave
false false false false 208.000000 [(9) ] 0 46800 47650 144.444443 text
grestore
gsave
false true false false 208.000000 [(4Y) ] 0 46650 47600 144.444443 text
grestore
45000 47200 45300 47200 10 line
gsave
false true false false 208.000000 [(10) ] 0 45200 47250 144.444443 text
grestore
gsave
false false false false 208.000000 [(4B) ] 0 45350 47200 144.444443 text
grestore
45000 46800 45300 46800 10 line
gsave
false true false false 208.000000 [(1) ] 0 45200 46850 144.444443 text
grestore
gsave
false false false false 208.000000 [(S) ] 0 45350 46800 144.444443 text
grestore
45000 46400 45200 46400 10 line
gsave
false true false false 208.000000 [(15) ] 0 45200 46450 144.444443 text
grestore
gsave
false false false false 208.000000 [(E) ] 0 45350 46400 144.444443 text
grestore
45250 46400 50 0 360 10 darc
45300 46200 46700 46200 10 line
46700 46200 46700 50300 10 line
46700 50300 45300 50300 10 line
45300 50300 45300 46200 10 line
gsave
false false false false 260.000000 [(74157) ] 0 45300 50340 180.555557 text
grestore
grestore
45000 50000 39000 50000 10 line
45000 49200 40500 49200 10 line
40500 49200 40500 49600 10 line
40500 49600 39000 49600 10 line
45000 48400 40000 48400 10 line
40000 48400 40000 49200 10 line
40000 49200 39000 49200 10 line
45000 47600 39500 47600 10 line
39500 47600 39500 48800 10 line
39500 48800 39000 48800 10 line
45000 49600 41000 49600 10 line
41000 49600 41000 47200 10 line
41000 47200 39000 47200 10 line
45000 48800 41500 48800 10 line
41500 48800 41500 46800 10 line
41500 46800 39000 46800 10 line
45000 48000 42000 48000 10 line
42000 48000 42000 46400 10 line
42000 46400 39000 46400 10 line
45000 47200 42500 47200 10 line
42500 47200 42500 46000 10 line
42500 46000 39000 46000 10 line
43000 46800 45000 46800 10 line
44000 46400 45000 46400 10 line
47000 50000 50500 50000 10 line
47000 49200 50500 49200 10 line
47000 48400 50500 48400 10 line
47000 47600 50500 47600 10 line
gsave
true false true false 260.000000 [(A3) ] 0 38700 50000 180.555557 text
grestore
gsave
true false true false 260.000000 [(A2) ] 0 38700 49600 180.555557 text
grestore
gsave
true false true false 260.000000 [(A1) ] 0 38700 49200 180.555557 text
grestore
gsave
true false true false 260.000000 [(A0) ] 0 38700 48800 180.555557 text
grestore
gsave
true false true false 260.000000 [(B3) ] 0 38700 47200 180.555557 text
grestore
gsave
true false true false 260.000000 [(B2) ] 0 38700 46800 180.555557 text
grestore
gsave
true false true false 260.000000 [(B1) ] 0 38700 46400 180.555557 text
grestore
gsave
true false true false 260.000000 [(B0) ] 0 38700 46000 180.555557 text
grestore
gsave
45000 45000 45300 45000 10 line
gsave
false true false false 208.000000 [(2) ] 0 45200 45050 144.444443 text
grestore
gsave
false false false false 208.000000 [(1A) ] 0 45350 45000 144.444443 text
grestore
47000 45000 46700 45000 10 line
gsave
false false false false 208.000000 [(4) ] 0 46800 45050 144.444443 text
grestore
gsave
false true false false 208.000000 [(1Y) ] 0 46650 45000 144.444443 text
grestore
45000 44600 45300 44600 10 line
gsave
false true false false 208.000000 [(3) ] 0 45200 44650 144.444443 text
grestore
gsave
false false false false 208.000000 [(1B) ] 0 45350 44600 144.444443 text
grestore
45000 44200 45300 44200 10 line
gsave
false true false false 208.000000 [(5) ] 0 45200 44250 144.444443 text
grestore
gsave
false false false false 208.000000 [(2A) ] 0 45350 44200 144.444443 text
grestore
47000 44200 46700 44200 10 line
gsave
false false false false 208.000000 [(7) ] 0 46800 44250 144.444443 text
grestore
gsave
false true false false 208.000000 [(2Y) ] 0 46650 44200 144.444443 text
grestore
45000 43800 45300 43800 10 line
gsave
false true false false 208.000000 [(6) ] 0 45200 43850 144.444443 text
grestore
gsave
false false false false 208.000000 [(2B) ] 0 45350 43800 144.444443 text
grestore
45000 43400 45300 43400 10 line
gsave
false true false false 208.000000 [(14) ] 0 45200 43450 144.444443 text
grestore
gsave
false false false false 208.000000 [(3A) ] 0 45350 43400 144.444443 text
grestore
47000 43400 46700 43400 10 line
gsave
false false false false 208.000000 [(12) ] 0 46800 43450 144.444443 text
grestore
gsave
false true false false 208.000000 [(3Y) ] 0 46650 43400 144.444443 text
grestore
45000 43000 45300 43000 10 line
gsave
false true false false 208.000000 [(13) ] 0 45200 43050 144.444443 text
grestore
gsave
false false false false 208.000000 [(3B) ] 0 45350 43000 144.444443 text
grestore
45000 42600 45300 42600 10 line
gsave
false true false false 208.000000 [(11) ] 0 45200 42650 144.444443 text
grestore
gsave
false false false false 208.000000 [(4A) ] 0 45350 42600 144.444443 text
grestore
47000 42600 46700 42600 10 line
gsave
false false false false 208.000000 [(9) ] 0 46800 42650 144.444443 text
grestore
gsave
false true false false 208.000000 [(4Y) ] 0 46650 42600 144.444443 text
grestore
45000 42200 45300 42200 10 line
gsave
false true false false 208.000000 [(10) ] 0 45200 42250 144.444443 text
grestore
gsave
false false false false 208.000000 [(4B) ] 0 45350 42200 144.444443 text
grestore
45000 41800 45300 41800 10 line
gsave
false true false false 208.000000 [(1) ] 0 45200 41850 144.444443 text
grestore
gsave
false false false false 208.000000 [(S) ] 0 45350 41800 144.444443 text
grestore
45000 41400 45200 41400 10 line
gsave
false true false false 208.000000 [(15) ] 0 45200 41450 144.444443 text
grestore
gsave
false false false false 208.000000 [(E) ] 0 45350 41400 144.444443 text
grestore
45250 41400 50 0 360 10 darc
45300 41200 46700 41200 10 line
46700 41200 46700 45300 10 line
46700 45300 45300 45300 10 line
45300 45300 45300 41200 10 line
gsave
false false false false 260.000000 [(74157) ] 0 45300 45340 180.555557 text
grestore
grestore
45000 45000 39000 45000 10 line
45000 44200 40500 44200 10 line
40500 44200 40500 44600 10 line
40500 44600 39000 44600 10 line
45000 43400 40000 43400 10 line
40000 43400 40000 44200 10 line
40000 44200 39000 44200 10 line
45000 42600 39500 42600 10 line
39500 42600 39500 43800 10 line
39500 43800 39000 43800 10 line
45000 41800 44500 41800 10 line
47000 45000 48000 45000 10 line
47000 44200 48500 44200 10 line
47000 43400 49000 43400 10 line
47000 42600 49500 42600 10 line
gsave
true false true false 260.000000 [(F3) ] 0 38700 45000 180.555557 text
grestore
gsave
true false true false 260.000000 [(F2) ] 0 38700 44600 180.555557 text
grestore
gsave
true false true false 260.000000 [(F1) ] 0 38700 44200 180.555557 text
grestore
gsave
true false true false 260.000000 [(F0) ] 0 38700 43800 180.555557 text
grestore
43000 46800 43000 50500 10 line
gsave
50500 50000 50800 50000 10 line
gsave
false true false false 208.000000 [(2) ] 0 50700 50050 144.444443 text
grestore
gsave
false false false false 208.000000 [(1A) ] 0 50850 50000 144.444443 text
grestore
52500 50000 52200 50000 10 line
gsave
false false false false 208.000000 [(4) ] 0 52300 50050 144.444443 text
grestore
gsave
false true false false 208.000000 [(1Y) ] 0 52150 50000 144.444443 text
grestore
50500 49600 50800 49600 10 line
gsave
false true false false 208.000000 [(3) ] 0 50700 49650 144.444443 text
grestore
gsave
false false false false 208.000000 [(1B) ] 0 50850 49600 144.444443 text
grestore
50500 49200 50800 49200 10 line
gsave
false true false false 208.000000 [(5) ] 0 50700 49250 144.444443 text
grestore
gsave
false false false false 208.000000 [(2A) ] 0 50850 49200 144.444443 text
grestore
52500 49200 52200 49200 10 line
gsave
false false false false 208.000000 [(7) ] 0 52300 49250 144.444443 text
grestore
gsave
false true false false 208.000000 [(2Y) ] 0 52150 49200 144.444443 text
grestore
50500 48800 50800 48800 10 line
gsave
false true false false 208.000000 [(6) ] 0 50700 48850 144.444443 text
grestore
gsave
false false false false 208.000000 [(2B) ] 0 50850 48800 144.444443 text
grestore
50500 48400 50800 48400 10 line
gsave
false true false false 208.000000 [(14) ] 0 50700 48450 144.444443 text
grestore
gsave
false false false false 208.000000 [(3A) ] 0 50850 48400 144.444443 text
grestore
52500 48400 52200 48400 10 line
gsave
false false false false 208.000000 [(12) ] 0 52300 48450 144.444443 text
grestore
gsave
false true false false 208.000000 [(3Y) ] 0 52150 48400 144.444443 text
grestore
50500 48000 50800 48000 10 line
gsave
false true false false 208.000000 [(13) ] 0 50700 48050 144.444443 text
grestore
gsave
false false false false 208.000000 [(3B) ] 0 50850 48000 144.444443 text
grestore
50500 47600 50800 47600 10 line
gsave
false true false false 208.000000 [(11) ] 0 50700 47650 144.444443 text
grestore
gsave
false false false false 208.000000 [(4A) ] 0 50850 47600 144.444443 text
grestore
52500 47600 52200 47600 10 line
gsave
false false false false 208.000000 [(9) ] 0 52300 47650 144.444443 text
grestore
gsave
false true false false 208.000000 [(4Y) ] 0 52150 47600 144.444443 text
grestore
50500 47200 50800 47200 10 line
gsave
false true false false 208.000000 [(10) ] 0 50700 47250 144.444443 text
grestore
gsave
false false false false 208.000000 [(4B) ] 0 50850 47200 144.444443 text
grestore
50500 46800 50800 46800 10 line
gsave
false true false false 208.000000 [(1) ] 0 50700 46850 144.444443 text
grestore
gsave
false false false false 208.000000 [(S) ] 0 50850 46800 144.444443 text
grestore
50500 46400 50700 46400 10 line
gsave
false true false false 208.000000 [(15) ] 0 50700 46450 144.444443 text
grestore
gsave
false false false false 208.000000 [(E) ] 0 50850 46400 144.444443 text
grestore
50750 46400 50 0 360 10 darc
50800 46200 52200 46200 10 line
52200 46200 52200 50300 10 line
52200 50300 50800 50300 10 line
50800 50300 50800 46200 10 line
gsave
false false false false 260.000000 [(74157) ] 0 50800 50340 180.555557 text
grestore
grestore
48000 45000 48000 49600 10 line
48000 49600 50500 49600 10 line
48500 44200 48500 48800 10 line
48500 48800 50500 48800 10 line
49000 43400 49000 48000 10 line
49000 48000 50500 48000 10 line
49500 42600 49500 47200 10 line
49500 47200 50500 47200 10 line
44000 46400 44000 40700 10 line
44500 41800 44500 40700 10 line
43500 45800 47500 45800 10 line
47500 45800 47500 46800 10 line
47500 46800 50500 46800 10 line
39000 40700 50000 40700 10 line
50000 46400 50000 40700 10 line
45000 41400 45000 40700 10 line
50000 46400 50500 46400 10 line
gsave
true false true false 260.000000 [(0) ] 0 38800 40700 180.555557 text
grestore
gsave
true false true false 260.000000 [(S1) ] 0 43500 50700 180.555557 text
grestore
gsave
true false true false 260.000000 [(S0) ] 0 43000 50700 180.555557 text
grestore
52500 47600 53500 47600 10 line
53500 47600 53500 48800 10 line
53500 48800 54000 48800 10 line
52500 50000 54000 50000 10 line
52500 48400 53000 48400 10 line
53000 48400 53000 49200 10 line
53000 49200 54000 49200 10 line
52500 49200 52600 49200 10 line
52600 49200 52600 49600 10 line
52600 49600 54000 49600 10 line
gsave
true false true false 260.000000 [(Y3) ] 0 54300 50000 180.555557 text
grestore
gsave
true false true false 260.000000 [(Y2) ] 0 54300 49600 180.555557 text
grestore
gsave
true false true false 260.000000 [(Y1) ] 0 54300 49200 180.555557 text
grestore
gsave
true false true false 260.000000 [(Y0) ] 0 54300 48800 180.555557 text
grestore
43500 45800 43500 50500 10 line
60 60 38970 49970 fbox
60 60 38970 49570 fbox
60 60 38970 49170 fbox
60 60 38970 48770 fbox
60 60 38970 47170 fbox
60 60 38970 46770 fbox
60 60 38970 46370 fbox
60 60 38970 45970 fbox
60 60 38970 44970 fbox
60 60 38970 44570 fbox
60 60 38970 44170 fbox
60 60 38970 43770 fbox
60 60 42970 50470 fbox
newpath
44000 40700
25
0 360 arc
fill
newpath
44000 40700
25
0 360 arc
fill
newpath
44500 40700
25
0 360 arc
fill
newpath
44500 40700
25
0 360 arc
fill
60 60 38970 40670 fbox
newpath
44000 40700
25
0 360 arc
fill
newpath
44500 40700
25
0 360 arc
fill
newpath
45000 40700
25
0 360 arc
fill
newpath
45000 40700
25
0 360 arc
fill
newpath
45000 40700
25
0 360 arc
fill
60 60 53970 48770 fbox
60 60 53970 49970 fbox
60 60 53970 49170 fbox
60 60 53970 49570 fbox
60 60 43470 50470 fbox
showpage
%%End
